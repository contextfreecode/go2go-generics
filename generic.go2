package main

import (
	"fmt"
	"math"
)

// Painful

type AnyVec interface {
	At(i int) interface{}
	Size() int
}

type AnyPoint2 struct {
	X float32
	Y float32
}

func (point AnyPoint2) At(i int) interface{} {
	if i == 0 {
		return point.X
	}
	return point.Y
}

func (point AnyPoint2) Size() int {
	return 2
}

func NormAny(vec AnyVec) float64 {
	if vec.Size() == 0 {
		return 0
	}
	var result float64 = 0
	for i := 0; i < vec.Size(); i++ {
		var x float64
		switch val := vec.At(i).(type) {
		case float32:
			x = float64(val)
		case float64:
			x = val
		}
		result += x * x
	}
	return math.Sqrt(result)
}

// Floatable and Vec

type Floatable interface {
	type
		int, int8, int16, int32, int64,
		uint, uint8, uint16, uint32, uint64, uintptr,
		float32, float64
}

type Vec(type Scalar Floatable) interface {
	At(i int) Scalar
	Size() int
}

// SliceVec

type SliceVec(type Scalar Floatable) struct {
	Slice []Scalar
}

func (vec SliceVec(Scalar)) At(i int) Scalar {
	return vec.Slice[i]
}

func (vec SliceVec(Scalar)) Size() int {
	return len(vec.Slice)
}

// Point2 Vec

type Point2 struct {
	X float32
	Y float32
}

func (point Point2) At(i int) float32 {
	if i == 0 {
		return point.X
	}
	return point.Y
}

func (point Point2) Size() int {
	return 2
}

// Generic norm

func NormIVec(type Scalar Floatable)(vec Vec(Scalar)) Scalar {
	if vec.Size() == 0 {
		return 0
	}
	var result Scalar = 0
	for i := 0; i < vec.Size(); i++ {
		result += vec.At(i) * vec.At(i)
	}
	return Scalar(math.Sqrt(float64(result)))
}

func Norm(type Scalar Floatable, V Vec(Scalar))(vec V) Scalar {
	if vec.Size() == 0 {
		return 0
	}
	var result Scalar = 0
	for i := 0; i < vec.Size(); i++ {
		result += vec.At(i) * vec.At(i)
	}
	return Scalar(math.Sqrt(float64(result)))
}

// Convenience

func NormNdIVec(a ...float64) float64 {
	return NormIVec(float64)(SliceVec(float64){Slice: a})
}

func NormNd(a ...float64) float64 {
	return Norm(float64, SliceVec(float64))(SliceVec(float64){Slice: a})
}

func Norm2fIVec(x, y float32) float32 {
	return NormIVec(float32)(Point2{X: x, Y: y})
}

func Norm2f(x, y float32) float32 {
	return Norm(float32, Point2)(Point2{X: x, Y: y})
}

func Norm2fSimple(x, y float32) float32 {
	return float32(math.Sqrt(float64(x * x + y * y)))
}

func Norm2fAny(x, y float32) float32 {
	return float32(NormAny(AnyPoint2{X: x, Y: y}))
}

// Main

func main() {
	fmt.Println(NormNdIVec(1, 2, 3))
	fmt.Println(NormNd(1, 2, 3))
	fmt.Println(Norm2fIVec(3, 4))
	fmt.Println(Norm2f(3, 4))
	fmt.Println(Norm2fSimple(3, 4))
	fmt.Println(Norm2fAny(3, 4))
}
